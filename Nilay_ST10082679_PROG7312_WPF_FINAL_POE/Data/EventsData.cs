using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Nilay_ST10082679_PROG7312_WPF_FINAL_POE
{
    public class EventsData
    {
        // SortedDictionary that maps a DateTime (key) to a Queue of Event objects (value)
        public SortedDictionary<DateTime, Queue<Event>> eventsDictionary = new SortedDictionary<DateTime, Queue<Event>>();
        // HashSet to store unique categories
        public HashSet<string> uniqueCategoriesSet = new HashSet<string>();
        // Dictionary to store search frequency
        public Dictionary<string, int> searchFrequency = new Dictionary<string, int>();
        //--------------------------------------------------------------------------------------//
        public EventsData()
        {
            InitializeEvents();
            InitializeCategories();
        }
        //--------------------------------------------------------------------------------------//
       public void InitializeEvents()
        {
            Queue<Event> eventsQueue = new Queue<Event>();
            //Adds events to the events dictionary
            //Events generated by chat gpt 
            eventsQueue.Enqueue(new Event("Road Resurfacing on N1", "Resurfacing of the N1 highway to improve road safety.", new DateTime(2024, 10, 17), TimeSpan.FromHours(6), "Infrastructure"));
            eventsQueue.Enqueue(new Event("Water Supply Maintenance in CBD", "Scheduled maintenance of water supply in the central business district.", new DateTime(2024, 10, 18), TimeSpan.FromHours(8), "Utilities"));
            eventsQueue.Enqueue(new Event("Park Cleanup at Green Park", "Community-driven cleanup of Green Park to maintain its cleanliness and beauty.", new DateTime(2024, 10, 19), TimeSpan.FromHours(4), "Community"));
            eventsQueue.Enqueue(new Event("Electricity Outage in Northern Suburbs", "Temporary power outage due to upgrades in the electrical grid.", new DateTime(2024, 10, 20), TimeSpan.FromHours(3), "Utilities"));
            eventsQueue.Enqueue(new Event("Waste Collection in East District", "Collection of household waste in the East District.", new DateTime(2024, 10, 21), TimeSpan.FromHours(5), "Sanitation"));
            eventsQueue.Enqueue(new Event("Flood Relief Assistance Drive", "Donation drive to provide relief materials for flood-affected areas.", new DateTime(2024, 10, 22), TimeSpan.FromHours(7), "Relief"));
            eventsQueue.Enqueue(new Event("Library Upgrade Announcement", "Announcement of the public library upgrade to enhance digital resources.", new DateTime(2024, 10, 23), TimeSpan.FromHours(1), "Community"));
            eventsQueue.Enqueue(new Event("Tree Planting Campaign", "A citywide tree-planting campaign to promote environmental sustainability.", new DateTime(2024, 10, 24), TimeSpan.FromHours(4), "Environment"));
            eventsQueue.Enqueue(new Event("Recycling Workshop", "A public workshop on recycling practices and waste management.", new DateTime(2024, 10, 25), TimeSpan.FromHours(2), "Education"));
            eventsQueue.Enqueue(new Event("Public Safety Awareness Day", "An awareness day to educate the public on safety practices in the community.", new DateTime(2024, 10, 26), TimeSpan.FromHours(6), "Safety"));
            eventsQueue.Enqueue(new Event("New Sports Complex Opening", "The official opening of the new municipal sports complex.", new DateTime(2024, 10, 27), TimeSpan.FromHours(5), "Recreation"));
            eventsQueue.Enqueue(new Event("Water Pipeline Upgrade in South", "Upgrading the water pipeline system in the southern district.", new DateTime(2024, 10, 28), TimeSpan.FromHours(8), "Infrastructure"));
            eventsQueue.Enqueue(new Event("Street Lighting Installation", "Installation of new street lights in residential areas.", new DateTime(2024, 10, 29), TimeSpan.FromHours(6), "Infrastructure"));
            eventsQueue.Enqueue(new Event("Public Transportation Feedback Forum", "A forum to gather public feedback on transportation services.", new DateTime(2024, 10, 30), TimeSpan.FromHours(3), "Community"));
            eventsQueue.Enqueue(new Event("Fire Drill at City Hall", "A fire drill conducted for municipal employees at City Hall.", new DateTime(2024, 11, 1), TimeSpan.FromHours(2), "Safety"));
            eventsQueue.Enqueue(new Event("River Cleanup Initiative", "Volunteer effort to clean the city's major river and improve water quality.", new DateTime(2024, 11, 2), TimeSpan.FromHours(5), "Environment"));
            eventsQueue.Enqueue(new Event("Pothole Repair in West District", "Repair of major potholes reported in the West District.", new DateTime(2024, 11, 3), TimeSpan.FromHours(6), "Infrastructure"));
            eventsQueue.Enqueue(new Event("Municipal Budget Review Meeting", "Public meeting to review and discuss the municipal budget for 2025.", new DateTime(2024, 11, 4), TimeSpan.FromHours(3), "Government"));
            eventsQueue.Enqueue(new Event("Community Sports Day", "A day of fun sports activities for the local community.", new DateTime(2024, 11, 5), TimeSpan.FromHours(7), "Recreation"));
            eventsQueue.Enqueue(new Event("Fire Safety Workshop", "Public workshop on fire safety and prevention practices.", new DateTime(2024, 11, 6), TimeSpan.FromHours(3), "Safety"));
            eventsQueue.Enqueue(new Event("Community Garden Launch", "Launch of a new community garden initiative to promote local agriculture.", new DateTime(2024, 11, 7), TimeSpan.FromHours(4), "Community"));
            eventsQueue.Enqueue(new Event("Road Closure for Marathon", "Temporary road closure for the annual city marathon event.", new DateTime(2024, 11, 8), TimeSpan.FromHours(5), "Recreation"));
            eventsQueue.Enqueue(new Event("Public Lecture on Urban Development", "A lecture on the future of urban development and infrastructure in the city.", new DateTime(2024, 11, 9), TimeSpan.FromHours(2), "Education"));
            eventsQueue.Enqueue(new Event("Disaster Preparedness Drill", "A citywide disaster preparedness drill to improve emergency response.", new DateTime(2024, 11, 10), TimeSpan.FromHours(4), "Safety"));
            eventsQueue.Enqueue(new Event("Street Market Launch", "Launch of a new weekend street market featuring local vendors.", new DateTime(2024, 11, 11), TimeSpan.FromHours(6), "Community"));
            eventsQueue.Enqueue(new Event("Electricity Substation Maintenance", "Scheduled maintenance of the city's primary electricity substation.", new DateTime(2024, 11, 12), TimeSpan.FromHours(5), "Utilities"));
            eventsQueue.Enqueue(new Event("Heritage Day Celebration", "Celebration of the city's cultural heritage with traditional performances and food.", new DateTime(2024, 11, 13), TimeSpan.FromHours(8), "Culture"));
            eventsQueue.Enqueue(new Event("Road Expansion on R21", "Expansion of the R21 highway to accommodate increased traffic.", new DateTime(2024, 11, 14), TimeSpan.FromHours(10), "Infrastructure"));
            eventsQueue.Enqueue(new Event("Public Consultation on Green Energy", "Consultation with residents on the implementation of green energy solutions.", new DateTime(2024, 11, 15), TimeSpan.FromHours(3), "Environment"));
            eventsQueue.Enqueue(new Event("Community Safety Forum", "Discussion with local authorities on improving community safety.", new DateTime(2024, 11, 16), TimeSpan.FromHours(4), "Safety"));

            foreach (var e in eventsQueue)
            {
                if (!eventsDictionary.ContainsKey(e.Date))
                    eventsDictionary[e.Date] = new Queue<Event>();

                eventsDictionary[e.Date].Enqueue(e);
            }
        }
        //--------------------------------------------------------------------------------------//
        // Method to initialize the unique categories from events stored
        public void InitializeCategories()
        {
            foreach (var eventQueue in eventsDictionary.Values)
            {
                foreach (var e in eventQueue)
                {
                    uniqueCategoriesSet.Add(e.Category);
                }
            }
        }
        //--------------------------------------------------------------------------------------//
        // Method to search events by category
        public List<Event> SearchByCategory(string category)
        {
            List<Event> result = new List<Event>();
            foreach (var eventQueue in eventsDictionary.Values)
            {
                foreach (var e in eventQueue)
                {
                    if (e.Category.Equals(category, StringComparison.OrdinalIgnoreCase))
                    {
                        result.Add(e);
                    }
                }
            }
            return result;
        }
        //--------------------------------------------------------------------------------------//
        // Method to search events by date
        public List<Event> SearchByDate(DateTime date)
        {
            if (eventsDictionary.ContainsKey(date))
            {
                return eventsDictionary[date].ToList();
            }
            return new List<Event>();
        }
        //--------------------------------------------------------------------------------------//
        //  Method to update the frequency of a search term in a dictionary
        public void UpdateSearchFrequency(string searchTerm)
        {
            if (searchFrequency.ContainsKey(searchTerm))
            {
                searchFrequency[searchTerm]++;
            }
            else
            {
                searchFrequency[searchTerm] = 1;
            }
        }
    }
}
//---------------------------------End of FIle-----------------------------------------------------//